
External_Interrupt_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000204  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095f  00000000  00000000  00000279  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a7  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a2  00000000  00000000  0000117f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001424  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 00000038  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_2 00000038  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_3 00000038  00000134  00000134  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    00000058  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000018c  0000018c  00000200  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000018e  0000018e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000016c  0000016c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_1>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_2>
   c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_3>
  10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000182 <__bad_interrupt>:
 182:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

000000c4 <__vector_1>:
#include <avr/interrupt.h>



// INT0 any logical change(Pin.D2)
ISR(INT0_vect) {
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
	//DDRD = 0xff;
	PORTD |= (0b1 << 5);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <__vector_1+0x1c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <__vector_1+0x26>
  ea:	00 00       	nop
	_delay_ms(1000);
}
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

Disassembly of section .text.__vector_2:

000000fc <__vector_2>:



// INT1 rising edge(Pin.D3)
ISR(INT1_vect) {
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
	//DDRD = 0xff;
	PORTD |= (0b1 << 6);
 10c:	82 b3       	in	r24, 0x12	; 18
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	82 bb       	out	0x12, r24	; 18
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 e6       	ldi	r24, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <__vector_2+0x1c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <__vector_2+0x26>
 122:	00 00       	nop
	_delay_ms(1000);
}
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

Disassembly of section .text.__vector_3:

00000134 <__vector_3>:



//INT2 falling edge(Pin.B2)
ISR(INT2_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	//DDRD = 0xff;
	PORTD |= (0b1 << 7) ;
 144:	82 b3       	in	r24, 0x12	; 18
 146:	80 68       	ori	r24, 0x80	; 128
 148:	82 bb       	out	0x12, r24	; 18
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	89 e6       	ldi	r24, 0x69	; 105
 14e:	98 e1       	ldi	r25, 0x18	; 24
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_3+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_3+0x26>
 15a:	00 00       	nop
	_delay_ms(1000);
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

Disassembly of section .text.main:

0000006c <main>:

int main(void) {
	/* INT0 any logical change(PD2)
	   INT1 rising edge(PD3) */
	   // (1101) //
	MCUCR  |= ((0b1 << 0) | (0b1 << 2) | (0b1 << 3));
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	8d 60       	ori	r24, 0x0D	; 13
  70:	85 bf       	out	0x35, r24	; 53
	MCUCR  &= ~(0b1 << 1);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	85 bf       	out	0x35, r24	; 53
	MCUCSR &= ~(0b1 << 6);	//INT2 falling edge(PB2)
  78:	84 b7       	in	r24, 0x34	; 52
  7a:	8f 7b       	andi	r24, 0xBF	; 191
  7c:	84 bf       	out	0x34, r24	; 52
	GICR   |= ((0b1 << 5) | (0b1 << 6) | (0b1 << 7));
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 6e       	ori	r24, 0xE0	; 224
  82:	8b bf       	out	0x3b, r24	; 59
	sei(); // SREG [Set Global Interrupt Enable bit(7)]
  84:	78 94       	sei
	DDRD  |= ((0b1 << 5) | (0b1 << 6) | (0b1 << 7));
  86:	81 b3       	in	r24, 0x11	; 17
  88:	80 6e       	ori	r24, 0xE0	; 224
  8a:	81 bb       	out	0x11, r24	; 17
	PORTD |= ((0b1 << 5) | (0b1 << 6) | (0b1 << 7));
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	80 6e       	ori	r24, 0xE0	; 224
  90:	82 bb       	out	0x12, r24	; 18
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	89 e6       	ldi	r24, 0x69	; 105
  96:	98 e1       	ldi	r25, 0x18	; 24
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
	_delay_ms(1000);
	
    while(1) {
		// Turn OFF all LEDs if any is turned ON
		if(PORTD & (0b111 << 5)) {
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	80 7e       	andi	r24, 0xE0	; 224
  a8:	e9 f3       	breq	.-6      	; 0xa4 <main+0x38>
			PORTD &= ~((0b1 << 5) | (0b1 << 6) | (0b1 << 7));
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	8f 71       	andi	r24, 0x1F	; 31
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	98 e1       	ldi	r25, 0x18	; 24
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	f0 cf       	rjmp	.-32     	; 0xa4 <main+0x38>

Disassembly of section .text.__dummy_fini:

0000018a <_fini>:
 18a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000018c <__funcs_on_exit>:
 18c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000018e <__simulator_exit>:
 18e:	08 95       	ret

Disassembly of section .text.exit:

0000016c <exit>:
 16c:	ec 01       	movw	r28, r24
 16e:	0e 94 c6 00 	call	0x18c	; 0x18c <__funcs_on_exit>
 172:	0e 94 c5 00 	call	0x18a	; 0x18a <_fini>
 176:	ce 01       	movw	r24, r28
 178:	0e 94 c7 00 	call	0x18e	; 0x18e <__simulator_exit>
 17c:	ce 01       	movw	r24, r28
 17e:	0e 94 c3 00 	call	0x186	; 0x186 <_Exit>

Disassembly of section .text._Exit:

00000186 <_Exit>:
 186:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
